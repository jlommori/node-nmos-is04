<h1 id='nodeapi'>NodeAPI</h1><h2 id='instantiation'>Instantiation</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">is04</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'node-nmos-is04'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">is04</span><span class="p">.</span><span class="nx">NodeRAMStore</span><span class="p">();</span>
<span class="nx">await</span> <span class="nx">store</span><span class="p">.</span><span class="nx">setSelf</span><span class="p">(</span><span class="k">new</span> <span class="nx">is04</span><span class="p">.</span><span class="nx">Node</span><span class="p">({</span>
  <span class="na">label</span><span class="p">:</span> <span class="s2">"Test Node"</span><span class="p">,</span>
  <span class="na">description</span><span class="p">:</span> <span class="s2">"This is a test node"</span><span class="p">,</span>
  <span class="na">tags</span><span class="p">:</span> <span class="p">[</span><span class="s2">"testing"</span><span class="p">,</span> <span class="s2">"node"</span><span class="p">],</span>
  <span class="na">interfaces</span><span class="p">:</span> <span class="p">[</span><span class="s2">"en0"</span><span class="p">]</span>
<span class="p">}))</span>

<span class="kd">let</span> <span class="nx">NodeAPI</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">is04</span><span class="p">.</span><span class="nx">NodeAPI</span><span class="p">({</span>
  <span class="na">store</span><span class="p">:</span> <span class="nx">store</span>
<span class="p">})</span>

<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'registry'</span><span class="p">,</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">cb</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">cb</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="nx">cb</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'heartbeat'</span><span class="p">,</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">cb</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">cb</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">. </span><span class="p">${</span><span class="nx">cb</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">time</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>
<p>A NMOS-IS04 Node is created and made available on the network.</p>
<h3 id='parameters'>Parameters</h3>
<table><thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>store</td>
<td>required</td>
<td></td>
<td>Node Store for access to Node information</td>
</tr>
<tr>
<td>address</td>
<td>optional</td>
<td>&#39;localhost:3000&#39;</td>
<td>Interface address and port</td>
</tr>
<tr>
<td>regAddress</td>
<td>optional</td>
<td>null</td>
<td>Address of a pre-defined NMOS Registration Server</td>
</tr>
</tbody></table>
<h3 id='event-39-registry-39'>Event: &#39;registry&#39;</h3>
<blockquote>
<p><code>registry</code> event may return several objects</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'registered'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'Node registered with Registration Server at 0.0.0.0:3000'</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">static</span><span class="p">:</span> <span class="kr">boolean</span><span class="p">,</span>
    <span class="nx">address</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
    <span class="nx">port</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span>
    <span class="nx">connected</span><span class="p">:</span> <span class="kr">boolean</span><span class="p">,</span>
    <span class="nx">registered</span><span class="p">:</span> <span class="kr">boolean</span><span class="p">,</span>
    <span class="nx">selectedIndex</span><span class="p">:</span> <span class="nx">number</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'error'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'Error registering with Registration Server at 0.0.0.0:3000'</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">:</span> <span class="p">{</span><span class="nx">error</span> <span class="nx">object</span><span class="p">}</span>
<span class="p">}</span>

<span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'unregistered'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'Node unregistered from Registration Server'</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">static</span><span class="p">:</span> <span class="kr">boolean</span><span class="p">,</span>
    <span class="nx">address</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
    <span class="nx">port</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span>
    <span class="nx">connected</span><span class="p">:</span> <span class="kr">boolean</span><span class="p">,</span>
    <span class="nx">registered</span><span class="p">:</span> <span class="kr">boolean</span><span class="p">,</span>
    <span class="nx">selectedIndex</span><span class="p">:</span> <span class="nx">number</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Fires <code>registry</code> on several different events. The specific event is listed as the <code>status</code> and the object may be different per each event</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>status</td>
<td>string</td>
<td><code>registered</code> Node has registered itself with a Registration Server</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Object with details about the registration server</td>
</tr>
<tr>
<td>data.static</td>
<td>boolean</td>
<td>Is the registration server provided (static) or found via mDNS</td>
</tr>
<tr>
<td>data.address</td>
<td>string</td>
<td>Registration server address</td>
</tr>
<tr>
<td>data.port</td>
<td>number</td>
<td>Registration server port</td>
</tr>
<tr>
<td>data.connected</td>
<td>boolean</td>
<td>Connection status</td>
</tr>
<tr>
<td>data.registered</td>
<td>boolean</td>
<td>Registration status</td>
</tr>
<tr>
<td>data.selectedIndex</td>
<td>number</td>
<td>Index of selected mDNS Registration Server advertisement</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>string</td>
<td><code>error</code> Error registering with the Registration Server</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Error object from HTTP request error</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>string</td>
<td><code>unregistered</code> Node has been unregistered by the Registration Server</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Object with details about the registration server</td>
</tr>
<tr>
<td>data.static</td>
<td>boolean</td>
<td>Is the registration server provided (static) or found via mDNS</td>
</tr>
<tr>
<td>data.address</td>
<td>string</td>
<td>Registration server address</td>
</tr>
<tr>
<td>data.port</td>
<td>number</td>
<td>Registration server port</td>
</tr>
<tr>
<td>data.connected</td>
<td>boolean</td>
<td>Connection status</td>
</tr>
<tr>
<td>data.registered</td>
<td>boolean</td>
<td>Registration status</td>
</tr>
<tr>
<td>data.selectedIndex</td>
<td>number</td>
<td>Index of selected mDNS Registration Server advertisement</td>
</tr>
</tbody></table>
<h3 id='event-39-heartbeat-39'>Event: &#39;heartbeat&#39;</h3>
<blockquote>
<p><code>heartbeat</code> event will be fired on every heartbeat once connected to a Registration Server</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'sent'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'Heartbeat sent to Registration Server'</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">time</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span>
    <span class="nx">uri</span><span class="p">:</span> <span class="nx">string</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'received'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'Heartbeat received from Registration Server'</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">time</span><span class="p">:</span> <span class="nx">number</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'error'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'Heartbeat Error'</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">time</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span>
    <span class="nx">error</span><span class="p">:</span> <span class="nx">object</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Fires <code>heartbeat</code> on several different events. The specific event is listed as the <code>status</code> and the object may be different per each event. Each <code>heartbeat</code> records the Javascript time in Unix milliseconds so a &quot;ping-pong&quot; latency can be determined. Heartbeats are sent ever 5 seconds and timeout after 1000 ms. The Registration Server SHOULD remove this entry after 12 seconds of no heartbeat.</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>status</td>
<td>string</td>
<td><code>sent</code> Node has sent a heartbeat to the Registration Server</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Object with details about the heartbeat</td>
</tr>
<tr>
<td>data.time</td>
<td>number</td>
<td>Javascript timestamp (Unix milliseconds) of when heartbeat was sent</td>
</tr>
<tr>
<td>data.uri</td>
<td>string</td>
<td>Address heartbeat was sent to</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>string</td>
<td><code>received</code> Node has received a heartbeat response from the Registration Server</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Object with details about the heartbeat</td>
</tr>
<tr>
<td>data.time</td>
<td>number</td>
<td>Javascript timestamp (Unix milliseconds) of when heartbeat was received</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>string</td>
<td><code>error</code> Error in sending or receiving heartbeat</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Object with details about the heartbeat</td>
</tr>
<tr>
<td>data.time</td>
<td>boolean</td>
<td>Javascript timestamp (Unix milliseconds) of when error was received</td>
</tr>
<tr>
<td>data.error</td>
<td>object</td>
<td>Error object from HTTP Request</td>
</tr>
</tbody></table>
<h2 id='start'>start()</h2><pre class="highlight javascript tab-javascript"><code><span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>

<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'started'</span><span class="p">,</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cb</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>
<blockquote>
<p><code>started</code> event returns the following:</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">message</span><span class="p">:</span> <span class="s2">"NMMOS IS-04 Node server has started"</span>
<span class="p">}</span>
</code></pre>
<p>Start the Node server and mDNS services.</p>
<h3 id='event-39-started-39'>Event: &#39;started&#39;</h3>
<p>Fires <code>started</code> event once the Node server has been started with the following object:</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friendly message for this event</td>
</tr>
</tbody></table>
<h2 id='stop'>stop()</h2><pre class="highlight javascript tab-javascript"><code>
<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>

<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'stopped'</span><span class="p">,</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cb</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>
<blockquote>
<p><code>stopped</code> event returns the following:</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">message</span><span class="p">:</span> <span class="s2">"NMMOS IS-04 Node server has stopped"</span>
<span class="p">}</span>
</code></pre>
<p>Stop the Node server and mDNS services.</p>
<h3 id='event-39-stopped-39'>Event: &#39;stopped&#39;</h3>
<p>Fires <code>stopped</code> event once the Node server has been shutdown, with the following object:</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friendly message for this event</td>
</tr>
</tbody></table>
<h2 id='startmdns'>startMDNS()</h2><pre class="highlight javascript tab-javascript"><code>
<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">startMDNS</span><span class="p">()</span>

<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'mdns'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">status</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
  <span class="na">message</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="nx">object</span>
<span class="p">})</span>
</code></pre>
<blockquote>
<p><code>mdns</code> event may return several objects (see docs)</p>
</blockquote>

<p>Manually start the mDNS Services. This is automatically started with <code>start()</code>, but if the mDNS services were manually stopped, you can restart them here.</p>
<h3 id='event-39-mdns-39'>Event: &#39;mdns&#39;</h3><pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'advert_start'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'mDNS Advertisement has been started'</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">hostname</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
    <span class="nx">txtRecord</span><span class="p">:</span> <span class="nx">object</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'browse_start'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'mDNS Browse for Registration Servers has been started'</span>
<span class="p">}</span>
</code></pre>
<p>Fires <code>mdns</code> on several different events. The specific event is listed as the <code>status</code> and the object may be different per each event</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>status</td>
<td>string</td>
<td><code>advert_start</code> Start of the mDNS Advertisement</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Additional data for this event</td>
</tr>
<tr>
<td>data.hostname</td>
<td>string</td>
<td>mDNS Advertisement hostname</td>
</tr>
<tr>
<td>data.txtRecord</td>
<td>object</td>
<td>txt_records included with mDNS Advertisement</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>string</td>
<td><code>browse_start</code> Start of mDNS looking for Registration Servers</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
</tbody></table>
<h2 id='stopmdns'>stopMDNS()</h2><pre class="highlight javascript tab-javascript"><code>
<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">stopMDNS</span><span class="p">()</span>

<span class="nx">NodeAPI</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'mdns'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">status</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
  <span class="na">message</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="nx">object</span>
<span class="p">})</span>
</code></pre>
<blockquote>
<p><code>mdns</code> event may return several objects (see docs)</p>
</blockquote>

<p>Manually stop the mDNS Services. This is automatically stopped with <code>stop()</code> but can also stop mDNS services manually</p>
<h3 id='event-39-mdns-39-2'>Event: &#39;mdns&#39;</h3><pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'advert_stop'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'mDNS Advertisement has stopped'</span>
<span class="p">}</span>

<span class="p">{</span>
  <span class="nl">status</span><span class="p">:</span> <span class="s1">'browse_stop'</span><span class="p">,</span>
  <span class="nx">message</span><span class="p">:</span> <span class="s1">'mDNS Browse for Registration Servers have stopped'</span>
<span class="p">}</span>
</code></pre>
<p>Fires <code>mdns</code> on several different events. The specific event is listed as the <code>status</code> and the object may be different per each event</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>status</td>
<td>string</td>
<td><code>advert_stop</code> Stop of the mDNS Advertisement</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>string</td>
<td><code>browse_stop</code> Stop of mDNS looking for Registration Servers</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>Human-friend message for this event</td>
</tr>
</tbody></table>
